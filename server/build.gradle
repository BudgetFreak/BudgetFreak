buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:${version_spring_boot_dependency_management}"
    }
}

subprojects {
    buildscript {
        repositories {
            jcenter()
        }
    }
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "io.spring.dependency-management"

    repositories {
        jcenter()
    }

    sourceCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    ext {
        generatedSourcesDir = file("src/main/generated")
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                // This directory only contains generated sources by builds from ItelliJ. It should always be empty and
                // is ignored in version control.
                srcDir 'src/main/generated'
            }
        }
    }

    compileJava {
        doFirst {
            delete generatedSourcesDir
            mkdir generatedSourcesDir
        }
        options.compilerArgs += ['-s', generatedSourcesDir]
    }

    task removeGeneratedMetamodel(type: Delete) {
        delete generatedSourcesDir
    }
    clean.dependsOn(removeGeneratedMetamodel)

    dependencies {
        compile(
                "org.springframework.boot:spring-boot-starter-data-jpa",
                "org.springframework.boot:spring-boot-starter-data-rest",
                "org.springframework.data:spring-data-rest-hal-browser",
                "org.springframework.hateoas:spring-hateoas",
                "org.apache.commons:commons-lang3:${version_commons_lang}",
                "org.hibernate:hibernate-java8",
        )

        annotationProcessor(
                "org.hibernate:hibernate-jpamodelgen:${version_jpamodelgen}",
        )

        compileOnly(
                "org.hibernate:hibernate-jpamodelgen:${version_jpamodelgen}",
        )

        runtime(
                "com.h2database:h2:${version_h2}",
        )

        testCompile(
                "org.springframework.boot:spring-boot-starter-test",
                "org.springframework.restdocs:spring-restdocs-mockmvc",
                "org.springframework.security:spring-security-test",
                "org.assertj:assertj-core:${version_assertj}",
                "org.mockito:mockito-core:${version_mockito}",
        )
    }
}
